//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IDBrowserServiceTest.IDBrowserService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImageProperty", Namespace="http://schemas.datacontract.org/2004/07/IDBrowserServiceCode")]
    [System.SerializableAttribute()]
    public partial class ImageProperty : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GUIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ImageCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SubPropertyCountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GUID {
            get {
                return this.GUIDField;
            }
            set {
                if ((object.ReferenceEquals(this.GUIDField, value) != true)) {
                    this.GUIDField = value;
                    this.RaisePropertyChanged("GUID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ImageCount {
            get {
                return this.ImageCountField;
            }
            set {
                if ((this.ImageCountField.Equals(value) != true)) {
                    this.ImageCountField = value;
                    this.RaisePropertyChanged("ImageCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SubPropertyCount {
            get {
                return this.SubPropertyCountField;
            }
            set {
                if ((this.SubPropertyCountField.Equals(value) != true)) {
                    this.SubPropertyCountField = value;
                    this.RaisePropertyChanged("SubPropertyCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CatalogItem", Namespace="http://schemas.datacontract.org/2004/07/IDBrowserServiceCode")]
    [System.SerializableAttribute()]
    public partial class CatalogItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FilePathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GUIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FilePath {
            get {
                return this.FilePathField;
            }
            set {
                if ((object.ReferenceEquals(this.FilePathField, value) != true)) {
                    this.FilePathField = value;
                    this.RaisePropertyChanged("FilePath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileType {
            get {
                return this.FileTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.FileTypeField, value) != true)) {
                    this.FileTypeField = value;
                    this.RaisePropertyChanged("FileType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GUID {
            get {
                return this.GUIDField;
            }
            set {
                if ((object.ReferenceEquals(this.GUIDField, value) != true)) {
                    this.GUIDField = value;
                    this.RaisePropertyChanged("GUID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImageInfo", Namespace="http://schemas.datacontract.org/2004/07/IDBrowserServiceCode")]
    [System.SerializableAttribute()]
    public partial class ImageInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> FileSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageResolutionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RatingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> TimestampField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<IDBrowserServiceTest.IDBrowserService.XmpProperty> XmpPropertiesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> FileSize {
            get {
                return this.FileSizeField;
            }
            set {
                if ((this.FileSizeField.Equals(value) != true)) {
                    this.FileSizeField = value;
                    this.RaisePropertyChanged("FileSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileType {
            get {
                return this.FileTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.FileTypeField, value) != true)) {
                    this.FileTypeField = value;
                    this.RaisePropertyChanged("FileType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageDescription {
            get {
                return this.ImageDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageDescriptionField, value) != true)) {
                    this.ImageDescriptionField = value;
                    this.RaisePropertyChanged("ImageDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageName {
            get {
                return this.ImageNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageNameField, value) != true)) {
                    this.ImageNameField = value;
                    this.RaisePropertyChanged("ImageName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageResolution {
            get {
                return this.ImageResolutionField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageResolutionField, value) != true)) {
                    this.ImageResolutionField = value;
                    this.RaisePropertyChanged("ImageResolution");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Rating {
            get {
                return this.RatingField;
            }
            set {
                if ((this.RatingField.Equals(value) != true)) {
                    this.RatingField = value;
                    this.RaisePropertyChanged("Rating");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> Timestamp {
            get {
                return this.TimestampField;
            }
            set {
                if ((this.TimestampField.Equals(value) != true)) {
                    this.TimestampField = value;
                    this.RaisePropertyChanged("Timestamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<IDBrowserServiceTest.IDBrowserService.XmpProperty> XmpProperties {
            get {
                return this.XmpPropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.XmpPropertiesField, value) != true)) {
                    this.XmpPropertiesField = value;
                    this.RaisePropertyChanged("XmpProperties");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="XmpProperty", Namespace="http://schemas.datacontract.org/2004/07/IDBrowserServiceCode")]
    [System.SerializableAttribute()]
    public partial class XmpProperty : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="IDBrowserService.IRestService")]
    public interface IRestService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestService/GetImageProperties", ReplyAction="http://tempuri.org/IRestService/GetImagePropertiesResponse")]
        System.Collections.Generic.List<IDBrowserServiceTest.IDBrowserService.ImageProperty> GetImageProperties(string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestService/GetImageProperties", ReplyAction="http://tempuri.org/IRestService/GetImagePropertiesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<IDBrowserServiceTest.IDBrowserService.ImageProperty>> GetImagePropertiesAsync(string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestService/GetImagePropertyThumbnail", ReplyAction="http://tempuri.org/IRestService/GetImagePropertyThumbnailResponse")]
        System.IO.Stream GetImagePropertyThumbnail(string guid, string isCategory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestService/GetImagePropertyThumbnail", ReplyAction="http://tempuri.org/IRestService/GetImagePropertyThumbnailResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> GetImagePropertyThumbnailAsync(string guid, string isCategory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestService/GetCatalogItems", ReplyAction="http://tempuri.org/IRestService/GetCatalogItemsResponse")]
        System.Collections.Generic.List<IDBrowserServiceTest.IDBrowserService.CatalogItem> GetCatalogItems(string orderDescending, string propertyGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestService/GetCatalogItems", ReplyAction="http://tempuri.org/IRestService/GetCatalogItemsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<IDBrowserServiceTest.IDBrowserService.CatalogItem>> GetCatalogItemsAsync(string orderDescending, string propertyGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestService/GetImageThumbnail", ReplyAction="http://tempuri.org/IRestService/GetImageThumbnailResponse")]
        System.IO.Stream GetImageThumbnail(string type, string imageGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestService/GetImageThumbnail", ReplyAction="http://tempuri.org/IRestService/GetImageThumbnailResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> GetImageThumbnailAsync(string type, string imageGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestService/GetImage", ReplyAction="http://tempuri.org/IRestService/GetImageResponse")]
        System.IO.Stream GetImage(string imageGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestService/GetImage", ReplyAction="http://tempuri.org/IRestService/GetImageResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> GetImageAsync(string imageGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestService/GetResizedImage", ReplyAction="http://tempuri.org/IRestService/GetResizedImageResponse")]
        System.IO.Stream GetResizedImage(string width, string height, string imageGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestService/GetResizedImage", ReplyAction="http://tempuri.org/IRestService/GetResizedImageResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> GetResizedImageAsync(string width, string height, string imageGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestService/GetImageInfo", ReplyAction="http://tempuri.org/IRestService/GetImageInfoResponse")]
        IDBrowserServiceTest.IDBrowserService.ImageInfo GetImageInfo(string imageGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestService/GetImageInfo", ReplyAction="http://tempuri.org/IRestService/GetImageInfoResponse")]
        System.Threading.Tasks.Task<IDBrowserServiceTest.IDBrowserService.ImageInfo> GetImageInfoAsync(string imageGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestService/GetRandomImageGuids", ReplyAction="http://tempuri.org/IRestService/GetRandomImageGuidsResponse")]
        System.Collections.Generic.List<string> GetRandomImageGuids();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestService/GetRandomImageGuids", ReplyAction="http://tempuri.org/IRestService/GetRandomImageGuidsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetRandomImageGuidsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRestServiceChannel : IDBrowserServiceTest.IDBrowserService.IRestService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RestServiceClient : System.ServiceModel.ClientBase<IDBrowserServiceTest.IDBrowserService.IRestService>, IDBrowserServiceTest.IDBrowserService.IRestService {
        
        public RestServiceClient() {
        }
        
        public RestServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RestServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RestServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RestServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<IDBrowserServiceTest.IDBrowserService.ImageProperty> GetImageProperties(string guid) {
            return base.Channel.GetImageProperties(guid);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<IDBrowserServiceTest.IDBrowserService.ImageProperty>> GetImagePropertiesAsync(string guid) {
            return base.Channel.GetImagePropertiesAsync(guid);
        }
        
        public System.IO.Stream GetImagePropertyThumbnail(string guid, string isCategory) {
            return base.Channel.GetImagePropertyThumbnail(guid, isCategory);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> GetImagePropertyThumbnailAsync(string guid, string isCategory) {
            return base.Channel.GetImagePropertyThumbnailAsync(guid, isCategory);
        }
        
        public System.Collections.Generic.List<IDBrowserServiceTest.IDBrowserService.CatalogItem> GetCatalogItems(string orderDescending, string propertyGuid) {
            return base.Channel.GetCatalogItems(orderDescending, propertyGuid);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<IDBrowserServiceTest.IDBrowserService.CatalogItem>> GetCatalogItemsAsync(string orderDescending, string propertyGuid) {
            return base.Channel.GetCatalogItemsAsync(orderDescending, propertyGuid);
        }
        
        public System.IO.Stream GetImageThumbnail(string type, string imageGuid) {
            return base.Channel.GetImageThumbnail(type, imageGuid);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> GetImageThumbnailAsync(string type, string imageGuid) {
            return base.Channel.GetImageThumbnailAsync(type, imageGuid);
        }
        
        public System.IO.Stream GetImage(string imageGuid) {
            return base.Channel.GetImage(imageGuid);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> GetImageAsync(string imageGuid) {
            return base.Channel.GetImageAsync(imageGuid);
        }
        
        public System.IO.Stream GetResizedImage(string width, string height, string imageGuid) {
            return base.Channel.GetResizedImage(width, height, imageGuid);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> GetResizedImageAsync(string width, string height, string imageGuid) {
            return base.Channel.GetResizedImageAsync(width, height, imageGuid);
        }
        
        public IDBrowserServiceTest.IDBrowserService.ImageInfo GetImageInfo(string imageGuid) {
            return base.Channel.GetImageInfo(imageGuid);
        }
        
        public System.Threading.Tasks.Task<IDBrowserServiceTest.IDBrowserService.ImageInfo> GetImageInfoAsync(string imageGuid) {
            return base.Channel.GetImageInfoAsync(imageGuid);
        }
        
        public System.Collections.Generic.List<string> GetRandomImageGuids() {
            return base.Channel.GetRandomImageGuids();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetRandomImageGuidsAsync() {
            return base.Channel.GetRandomImageGuidsAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="IDBrowserService.ISoapService")]
    public interface ISoapService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoapService/GetImagePropertiesSoap", ReplyAction="http://tempuri.org/ISoapService/GetImagePropertiesSoapResponse")]
        System.Collections.Generic.List<IDBrowserServiceTest.IDBrowserService.ImageProperty> GetImagePropertiesSoap(string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoapService/GetImagePropertiesSoap", ReplyAction="http://tempuri.org/ISoapService/GetImagePropertiesSoapResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<IDBrowserServiceTest.IDBrowserService.ImageProperty>> GetImagePropertiesSoapAsync(string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoapService/GetImagePropertyThumbnailSoap", ReplyAction="http://tempuri.org/ISoapService/GetImagePropertyThumbnailSoapResponse")]
        System.IO.Stream GetImagePropertyThumbnailSoap(string guid, string isCategory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoapService/GetImagePropertyThumbnailSoap", ReplyAction="http://tempuri.org/ISoapService/GetImagePropertyThumbnailSoapResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> GetImagePropertyThumbnailSoapAsync(string guid, string isCategory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoapService/GetCatalogItemsSoap", ReplyAction="http://tempuri.org/ISoapService/GetCatalogItemsSoapResponse")]
        System.Collections.Generic.List<IDBrowserServiceTest.IDBrowserService.CatalogItem> GetCatalogItemsSoap(string orderDescending, string propertyGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoapService/GetCatalogItemsSoap", ReplyAction="http://tempuri.org/ISoapService/GetCatalogItemsSoapResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<IDBrowserServiceTest.IDBrowserService.CatalogItem>> GetCatalogItemsSoapAsync(string orderDescending, string propertyGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoapService/GetImageThumbnailSoap", ReplyAction="http://tempuri.org/ISoapService/GetImageThumbnailSoapResponse")]
        System.IO.Stream GetImageThumbnailSoap(string type, string imageGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoapService/GetImageThumbnailSoap", ReplyAction="http://tempuri.org/ISoapService/GetImageThumbnailSoapResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> GetImageThumbnailSoapAsync(string type, string imageGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoapService/GetImageSoap", ReplyAction="http://tempuri.org/ISoapService/GetImageSoapResponse")]
        System.IO.Stream GetImageSoap(string imageGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoapService/GetImageSoap", ReplyAction="http://tempuri.org/ISoapService/GetImageSoapResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> GetImageSoapAsync(string imageGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoapService/GetResizedImageSoap", ReplyAction="http://tempuri.org/ISoapService/GetResizedImageSoapResponse")]
        System.IO.Stream GetResizedImageSoap(string width, string height, string imageGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoapService/GetResizedImageSoap", ReplyAction="http://tempuri.org/ISoapService/GetResizedImageSoapResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> GetResizedImageSoapAsync(string width, string height, string imageGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoapService/GetImageInfoSoap", ReplyAction="http://tempuri.org/ISoapService/GetImageInfoSoapResponse")]
        IDBrowserServiceTest.IDBrowserService.ImageInfo GetImageInfoSoap(string GetImageInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoapService/GetImageInfoSoap", ReplyAction="http://tempuri.org/ISoapService/GetImageInfoSoapResponse")]
        System.Threading.Tasks.Task<IDBrowserServiceTest.IDBrowserService.ImageInfo> GetImageInfoSoapAsync(string GetImageInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoapService/GetRandomImageGuidsSoap", ReplyAction="http://tempuri.org/ISoapService/GetRandomImageGuidsSoapResponse")]
        System.Collections.Generic.List<string> GetRandomImageGuidsSoap();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoapService/GetRandomImageGuidsSoap", ReplyAction="http://tempuri.org/ISoapService/GetRandomImageGuidsSoapResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetRandomImageGuidsSoapAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISoapServiceChannel : IDBrowserServiceTest.IDBrowserService.ISoapService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SoapServiceClient : System.ServiceModel.ClientBase<IDBrowserServiceTest.IDBrowserService.ISoapService>, IDBrowserServiceTest.IDBrowserService.ISoapService {
        
        public SoapServiceClient() {
        }
        
        public SoapServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SoapServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SoapServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SoapServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<IDBrowserServiceTest.IDBrowserService.ImageProperty> GetImagePropertiesSoap(string guid) {
            return base.Channel.GetImagePropertiesSoap(guid);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<IDBrowserServiceTest.IDBrowserService.ImageProperty>> GetImagePropertiesSoapAsync(string guid) {
            return base.Channel.GetImagePropertiesSoapAsync(guid);
        }
        
        public System.IO.Stream GetImagePropertyThumbnailSoap(string guid, string isCategory) {
            return base.Channel.GetImagePropertyThumbnailSoap(guid, isCategory);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> GetImagePropertyThumbnailSoapAsync(string guid, string isCategory) {
            return base.Channel.GetImagePropertyThumbnailSoapAsync(guid, isCategory);
        }
        
        public System.Collections.Generic.List<IDBrowserServiceTest.IDBrowserService.CatalogItem> GetCatalogItemsSoap(string orderDescending, string propertyGuid) {
            return base.Channel.GetCatalogItemsSoap(orderDescending, propertyGuid);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<IDBrowserServiceTest.IDBrowserService.CatalogItem>> GetCatalogItemsSoapAsync(string orderDescending, string propertyGuid) {
            return base.Channel.GetCatalogItemsSoapAsync(orderDescending, propertyGuid);
        }
        
        public System.IO.Stream GetImageThumbnailSoap(string type, string imageGuid) {
            return base.Channel.GetImageThumbnailSoap(type, imageGuid);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> GetImageThumbnailSoapAsync(string type, string imageGuid) {
            return base.Channel.GetImageThumbnailSoapAsync(type, imageGuid);
        }
        
        public System.IO.Stream GetImageSoap(string imageGuid) {
            return base.Channel.GetImageSoap(imageGuid);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> GetImageSoapAsync(string imageGuid) {
            return base.Channel.GetImageSoapAsync(imageGuid);
        }
        
        public System.IO.Stream GetResizedImageSoap(string width, string height, string imageGuid) {
            return base.Channel.GetResizedImageSoap(width, height, imageGuid);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> GetResizedImageSoapAsync(string width, string height, string imageGuid) {
            return base.Channel.GetResizedImageSoapAsync(width, height, imageGuid);
        }
        
        public IDBrowserServiceTest.IDBrowserService.ImageInfo GetImageInfoSoap(string GetImageInfo) {
            return base.Channel.GetImageInfoSoap(GetImageInfo);
        }
        
        public System.Threading.Tasks.Task<IDBrowserServiceTest.IDBrowserService.ImageInfo> GetImageInfoSoapAsync(string GetImageInfo) {
            return base.Channel.GetImageInfoSoapAsync(GetImageInfo);
        }
        
        public System.Collections.Generic.List<string> GetRandomImageGuidsSoap() {
            return base.Channel.GetRandomImageGuidsSoap();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetRandomImageGuidsSoapAsync() {
            return base.Channel.GetRandomImageGuidsSoapAsync();
        }
    }
}
